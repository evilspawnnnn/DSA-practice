void helper(int arr[],int si,int ei){
    if(si>=ei){
        return;
    }
    int mid=(si+ei)/2;
    helper(arr,si,mid);
    helper(arr,mid+1,ei);
    int i=si, j=mid+1,k=0;
    int*p=new int[ei-si+1];
    while(i<=mid && j<=ei){
        if(arr[i]<=arr[j]){
            p[k]=arr[i];
            k++,i++;
        }
        else{
            p[k]=arr[j];
            k++,j++;
        }
    }
    while(i<=mid){
        p[k]=arr[i] ;
        k++,i++;
    }
    while(j<=ei){
        p[k]=arr[j];
        k++,j++;
    }
    int index=si;
    for(int r=0;r<k;r++){
        arr[index]=p[r];
        index++;
    } 
    delete[] p;
} 
        
    
void mergeSort(int *arr1, int n) {
    int si=0;
    int ei=n-1;
    helper(arr1,si,ei);
}
void intersection(int *arr1, int *arr2, int n, int m) 
{mergeSort(arr1,n);
    mergeSort(arr2,m);
    int i=0,j=0;
    while(i<n && j<m){
        if(arr1[i]==arr2[j]){
            cout<<arr1[i]<<' ';
            i++,j++;
        }
        else if(arr1[i]<arr2[j])
            i++;
        else{
            j++;
        }
    } 
}
