#include <iostream>
using namespace std;

template <typename T>
class QueueDynamic{
  T* data;
  int capacity;
  int size;
  int firstIndex;
  int nextIndex;
  public:
  QueueDynamic(){
      capacity=5;
      data=new T[5];
      firstIndex=-1;
      nextIndex=0;
      size=0;
  }
  int getSize(){
      return size;
  }
  bool isEmpty(){
      return size==0;
  }
  void Enqueue(int element){
      if(size==capacity){
          T* newData=new T[capacity*2];
          int k=0;
          for(int i=firstIndex;i<capacity;i++){
              newData[k]=data[i];
              k++;
          }
          for(int i=0;i<firstIndex;i++){
              newData[k]=data[i];
              k++;
          }
          delete[] data;
          data=newData;
          firstIndex=0;
          nextIndex=capacity;
          capacity*=2;
      }
      data[nextIndex]=element;
      nextIndex=(nextIndex+1)%capacity;
      if(firstIndex==-1){
          firstIndex=0;
      }
      size++;
  }
  T Dequeue(){
      if(isEmpty()){
          cout<<"Empty Queue"<<endl;
          return 0;
      }
      T n=data[firstIndex];
      firstIndex=(firstIndex+1)%capacity;
      size--;
      if(size==0){
          firstIndex=-1;
          nextIndex=0;
      }
      return n;
  }
  T front(){
      if(isEmpty()){
          cout<<"Empty Queue"<<endl;
          return 0;
      }
      return data[firstIndex];
  }
};
