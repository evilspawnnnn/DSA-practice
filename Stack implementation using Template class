#include <iostream>
#include <climits>
using namespace std;
template <typename T>
class StackImplement{
  T* data;
  int capacity;
  int nextIndex;
  public:
  StackImplement(){
      data=new int[5];
      capacity=5;
      nextIndex=0;
  }
  int size(){
      return nextIndex;
  }
  bool isEmpty(){
      return nextIndex==0;
  }
  T pop(){
      if(nextIndex==0){
          cout<<"Empty Stack"<<endl;
          return 0;
      }
      else{
          nextIndex--;
          return data[nextIndex];
      }
  }
  T top(){
      if(nextIndex==0){
          cout<<"Empty Stack"<<endl;
          return 0;
      }
      else{
          return data[nextIndex-1];
      }
  }
  void push(int element){
      if(nextIndex==capacity){
          T* newData=new T[capacity*2];
          for(int i=0;i<capacity;i++){
              newData[i]=data[i];
          }
          delete[] data;
          capacity*=2;
          data=newData;
      }
      else{
          data[nextIndex]=element;
          nextIndex++;
      }
  }
};
