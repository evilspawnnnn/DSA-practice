#include <iostream>
using namespace std;

class Node {
   public:
    int data;
    Node *next;

    Node(int data) {
        this->data = data;
        next = NULL;
    }
};

#include "solution.h"
class Queue {
	// Define the data members
    Node* head;
    Node* tail;
    int size;
   public:
    Queue(){
		// Implement the Constructor
		size=0;
        head=NULL;
        tail=NULL;
	}
	
	/*----------------- Public Functions of Stack -----------------*/

	int getSize() {
		// Implement the getSize() function
        return size;
	}

    bool isEmpty() {
		// Implement the isEmpty() function
        return size==0;
	}

    void enqueue(int data) {
		// Implement the enqueue() function
        Node* newNode=new Node(data);
        if(head==NULL){
            tail=newNode;
            head=newNode;
        }
        else{
            tail->next=newNode;
            tail=tail->next;
        }
        size++;
	}

    int dequeue() {
        // Implement the dequeue() function
        if(head==NULL){
            return -1;
        }
        Node* temp=head;
        int ans=head->data;
        head=head->next;
        delete temp;
        size--;
        return ans;
    }

    int front() {
        // Implement the front() function
        if(head==NULL){
            return -1;
        }
        else
        	return head->data;
    }
};
int main() {
    Queue q;

    int t;
    cin >> t;

    while (t--) {
        int choice, input;
        cin >> choice;
        switch (choice) {
            case 1:
                cin >> input;
                q.enqueue(input);
                break;
            case 2:
                cout << q.dequeue() << "\n";
                break;
            case 3:
                cout << q.front() << "\n";
                break;
            case 4:
                cout << q.getSize() << "\n";
                break;
            default:
                cout << ((q.isEmpty()) ? "true\n" : "false\n");
                break;
        }
    }
}
