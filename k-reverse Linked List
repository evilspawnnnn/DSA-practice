#include <iostream>

class Node
{
public:
	int data;
	Node *next;
	Node(int data)
	{
		this->data = data;
		this->next = NULL;
	}
};

using namespace std;
#include "solution.h"

Node *takeinput()
{
	int data;
	cin >> data;
	Node *head = NULL, *tail = NULL;
	while (data != -1)
	{
		Node *newnode = new Node(data);
		if (head == NULL)
		{
			head = newnode;
			tail = newnode;
		}
		else
		{
			tail->next = newnode;
			tail = newnode;
		}
		cin >> data;
	}
	return head;
}

void print(Node *head)
{
	Node *temp = head;
	while (temp != NULL)
	{
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}
class Pair{								//pair class made 
    public:
    Node* head;
    Node* tail;
};
Pair reverseLL(Node* head){					//return type set to pair so we can return both head and tail
    if(head==NULL || head->next==NULL){
        Pair ans;
        ans.head=head;
        ans.tail=head;
        return ans;
    }
    Pair c=reverseLL(head->next);
    c.tail->next=head;
    head->next=NULL;
    Pair ans;
    ans.head=c.head;
    ans.tail=head;
    return ans;
}
Node *kReverse(Node *head, int k)
{
	//Write your code here
    if(head==NULL || head->next==NULL || k<=1){
        return head;
    }
    int count=1;
    Node* h1=head;
    Node* t1=head;
    while(count<k && t1->next!=NULL){
        count++;
        t1=t1->next;
    }
    Node* h2=t1->next;
    t1->next=NULL;
    Pair ans=reverseLL(h1);		
    Node* head2=kReverse(h2,k);					//recursive call made
    h1=ans.head;
    t1=ans.tail;
    t1->next=head2;
    return h1;
}
int main()
{
	int t;
	cin >> t;

	while (t--)
	{
		Node *head = takeinput();
		int k;
		cin >> k;
		head = kReverse(head, k);
		print(head);
	}
	
	return 0;
}
