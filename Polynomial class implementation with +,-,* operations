
/*************
 Driver program to test below functions
 
int main()
{
    int count1,count2,choice;
    cin >> count1;
    
    int *degree1 = new int[count1];
    int *coeff1 = new int[count1];
    
    for(int i=0;i < count1; i++) {
        cin >> degree1[i];
    }
    
    for(int i=0;i < count1; i++) {
        cin >> coeff1[i];
    }
    
    Polynomial first;
    for(int i = 0; i < count1; i++){
        first.setCoefficient(degree1[i],coeff1[i]);
    }
    
    cin >> count2;
    
    int *degree2 = new int[count2];
    int *coeff2 = new int[count2];
    
    for(int i=0;i < count2; i++) {
        cin >> degree2[i];
    }
    
    for(int i=0;i < count2; i++) {
        cin >> coeff2[i];
    }
    
    Polynomial second;
    for(int i = 0; i < count2; i++){
        second.setCoefficient(degree2[i],coeff2[i]);
    }
    
    cin >> choice;
    
    Polynomial result;
    switch(choice){
            // Add
        case 1:
            result = first + second;
            result.print();
            break;
            // Subtract
        case 2 :
            result = first - second;
            result.print();
            break;
            // Multiply
        case 3 :
            result = first * second;
            result.print();
            break;
            
        case 4 : // Copy constructor
        {
            Polynomial third(first);
            if(third.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
        case 5 : // Copy assignment operator
        {
            Polynomial fourth(first);
            if(fourth.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
    }
    
    return 0;
}
****************/
#include <bits/stdc++.h>
using namespace std;
class Polynomial {
    public:			//we need to make this public right??
    int *degCoeff;      // Name of your array (Don't change this)
    int capacity;
    // Complete the class
    Polynomial(int size = 1){									//self-made default constructor
        capacity = size;
        degCoeff = new int[capacity];
        for(int i = 0; i < capacity; i++) {
            degCoeff[i] = 0;
        }
    }
    Polynomial(Polynomial const &p){					//self-made copy constructor
        this->degCoeff=new int[p.capacity];
        for(int i=0;i<p.capacity;i++){
            degCoeff[i]=p.degCoeff[i];
        }
        this->capacity=p.capacity;
    }
    void setCoefficient(int deg, int coeff){
        while(capacity <= deg) {
            Polynomial temp(2 * capacity);
            for(int i = 0; i < capacity; i++) {
                temp.degCoeff[i] = degCoeff[i];
            }
            *this = temp;
        }
        degCoeff[deg] = coeff;
    }
    void operator=(Polynomial const &p){		//self-made copy assignment operator
        this->degCoeff=new int[p.capacity];
        for(int i=0;i<p.capacity;i++){
            degCoeff[i]=p.degCoeff[i];
        }
        this->capacity=p.capacity;
    }
        Polynomial operator+(const Polynomial& p) {
        int size = max(capacity, p.capacity);
        // cout << size << endl;
        Polynomial ans(size);
        int i = 0, j = 0, k = 0;
        while(i < capacity || j < p.capacity) {
            if(i < capacity) {
                ans.degCoeff[k] += degCoeff[i];
                i++;
            }
            if(j < p.capacity) {
                ans.degCoeff[k] += p.degCoeff[j];
                j++;
            }
            k++;
        }
        return ans;
    }
    Polynomial operator-(const Polynomial& p) {
        int size = max(capacity, p.capacity);
        Polynomial ans(size);
        // cout << size << endl;
        int i = 0, j = 0, k = 0;
        while(i < capacity || j < p.capacity) {
            if(i < capacity) {
                ans.degCoeff[k] += degCoeff[i];
                i++;
            }
            if(j < p.capacity) {
                ans.degCoeff[k] -= p.degCoeff[j];
                j++;
            }
            k++;
        }
        return ans;
    }
    Polynomial operator*(const Polynomial& p) {
        int size = capacity + p.capacity;
        Polynomial ans(size);
        for(int i = 0; i < capacity; i++) {
            if(degCoeff[i] == 0) continue;
            for(int j = 0; j < p.capacity; j++) {
                //if(p.degCoeff[j] == 0) continue; //no need of this line
                ans.degCoeff[i + j] += degCoeff[i] * p.degCoeff[j];
            }
        }
        return ans;
    }
    
    void print() {
        for(int i = 0; i < capacity; i++) {
            if(degCoeff[i] == 0) continue;
            cout << degCoeff[i] << "x" << i << " ";
        }
        cout << endl;
    }
    
};

