#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class dynamicArray{
  private:
  int *data;
  int nextIndex;
  int capacity;
  public:
  dynamicArray(){
      data=new int[5];  //making a dynamic array of size 5
      nextIndex=0;
      capacity=5;
  }
  dynamicArray(dynamicArray const &d){    //self-made copy constructor to have deep copy
    this->data=new int[d.capacity];
    for(int i=0;i<d.nextIndex;i++){
        this->data[i]=d.data[i];
    }
    this->nextIndex=d.nextIndex;
    this->capacity=d.capacity;
  }
  void operator=(dynamicArray const &d){    //self-made copy assignment operator using operator overloading
    this->data=new int[d.capacity];
    for(int i=0;i<d.nextIndex;i++){
        this->data[i]=d.data[i];
    }
    this->nextIndex=d.nextIndex;
    this->capacity=d.capacity;
  }
  void add(int element){
      if(nextIndex==capacity){
        int* newData=new int[capacity*2];   //Everytime the array gets filled size is doubled
        for(int i=0;int<capacity;i++){
            newData[i]=data[i];
        }
        delete[] data;                  
        data=newData;           //As newData not defined outta this scope so the data pointer is pointed at newData's address
      }
      data[nextIndex]=element;
      nextIndex++;
  }
  void addElement(int index,int element){
    if(index<nextIndex){    //if less than nextIndex then array can be updated without updating nextIndex
        data[index]=element;
    }
    else if(index==nextIndex){
        add(element);
    }
    else
        return;
  }
  void get(int index) const{    //getter function made constant as it's not doing any changes to *this
    if(index<nextIndex){
        return data[index];
    }
    else
        return -1;
  }
};
