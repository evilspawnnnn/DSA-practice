// void helper(int input[],int si,int ei){
// 	if(si>=ei){
//         return;
//     }
//     int mid=(si+ei)/2;
//     helper(input,si,mid);
//     helper(input,mid+1,ei);
//     int i=si;
//     int k=0;
//     int j=mid+1;
//     int* output=new int[ei-si+1];
//     while(i<=mid && j<=ei){
// 		if(input[i]<input[j]){			              //mergeSort function used for Approach-2 with TC O(nlogn)
//             output[k]=input[i];
//     		k++,i++;
//         }
//         else{
// 			output[k]=input[j];
//             k++,j++;
//         }
//     }
//     while(i<=mid){
// 		output[k]=input[i];
//         k++,i++;
//     }
//     while(j<=ei){
// 		output[k]=input[j];
//         k++,j++;
//     }
//     int index=si;
//     for(int n=0;n<k;n++){
//         input[index]=output[n];
//         index++;
//     }
//     delete[] output;
// }
// void mergeSort(int input[], int size){
//     int si=0;
//     int ei=size-1;
//     helper(input,si,ei);
// }

int findDuplicate(int *arr, int n)
{
    //Write your code here
    // for(int i=0;i<n;i++){
    //     int count=0;
    //     for(int j=0;j<n;j++){
    //         if(arr[i]==arr[j]){            //Approach-1 with time complexity O(n^2)
    //             count++;
    //         }
    //     }
    //     if(count==2){
    //         return arr[i];
    //     }
    // }
    // mergeSort(arr,n);
    // for(int i=0;i<n-1;i++){          //Approach-2 first sorting then comparing so TC is O(nlogn)
    //     if(arr[i]==arr[i+1])
    //         return arr[i];
    //     else
    //         continue;
    // }
    int sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];				//Approach-3 with TC O(n) and SC O(1) BEST APPROACH
    }
    int sum2=(n-2)*(n-1)/2;
    return sum-sum2;
}
