// void helper(int input[],int si,int ei){
// 	if(si>=ei){
//         return;
//     }
//     int mid=(si+ei)/2;
//     helper(input,si,mid);
//     helper(input,mid+1,ei);
//     int i=si;
//     int k=0;
//     int j=mid+1;
//     int* output=new int[ei-si+1];
//     while(i<=mid && j<=ei){
// 		if(input[i]<input[j]){			        //mergeSort function used for Approach-2
//             output[k]=input[i];
//     		k++,i++;
//         }
//         else{
// 			output[k]=input[j];
//             k++,j++;
//         }
//     }
//     while(i<=mid){
// 		output[k]=input[i];
//         k++,i++;
//     }
//     while(j<=ei){
// 		output[k]=input[j];
//         k++,j++;
//     }
//     int index=si;
//     for(int n=0;n<k;n++){
//         input[index]=output[n];
//         index++;
//     }
//     delete[] output;
// }
// void mergeSort(int input[], int size){
//     int si=0;
//     int ei=size-1;
//     helper(input,si,ei);
// }
int findUnique(int *arr, int n) {
    // Write your code here
    // for(int i=0;i<n;i++){       	// Approach-1 with time complexity of O(n2)
    //     int count=0;
    //     for(int j=0;j<n;j++){
    //         if(arr[i]==arr[j])
    //             count++;
    //     }
    //     if(count==1){
    //         return arr[i];
    //     }
    //     else
    //         continue;
    // }
    // mergeSort(arr,n);
    // for(int i=0;i<n;i+=2){        // Approach-2 with time complexity O(nlogn)
    //     if(arr[i]==arr[i+1])
    //         continue;
    //     else
    //         return arr[i];
    // }
    int i=arr[0];
    int j=1;
    for(;j<n;j++){                  // Approach-3 with time complexity O(n) "Best Approach"
        i=i^arr[j];
    }
    return i;
}
